// single priority queue with enqueue and dequeue, no repetitions

enq(val) matches {event:'func_pre',name:'enqueue',args:[val]};
deq(val) matches  {event:'func_post',name:'dequeue',result:val};
// deq(val,min) matches deq(val) with val >= min;
deq matches deq(_);
ev(val) matches enq(val) | deq(val);

// a first test

//Queue<s> =
//  {let val; enq(val) (({let val2; deq(val2,val) >> deq(val) all}) /\ Queue<s+1>)}
//  \/ (if(s>0) deq Queue<s-1> else empty);  
// Main=Queue<0>;

Queue1={let val; enq(val) ( deq(val) | Queue1)}; // deq(val) is possible if the element has been enqueued and not already dequeued
                                                                           // works with repetitions 
Queue2={let val; enq(val) (({let val2; deq(val2,val) >> deq(val) all}) /\ Queue2)} \/ (deq Queue2); // does not work with repetitions 
Main=Queue1/\Queue2;

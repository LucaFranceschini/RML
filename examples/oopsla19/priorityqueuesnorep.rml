// single priority queue with enqueue and dequeue, no repetitions

enq(val) matches {event:'func_pre',name:'enqueue',args:[val]};
deq(val) matches  {event:'func_post',name:'dequeue',result:val};
deq(val,min) matches deq(val) with val >= min;
deq matches deq(_);


Queue1 = {let val; enq(val) ((Queue1 /\ (ev(val) >> deq(val) all)) | enq(val)* deq(val))}; // to be done
Queue2={let val; enq(val) (({let val2; deq(val2,val) >> deq(val) all}) /\ Queue2)} \/ (deq Queue2); 
Main=Queue1/\Queue2;
